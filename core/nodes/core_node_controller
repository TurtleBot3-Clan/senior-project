#!/usr/bin/env python
# -*- coding: utf-8 -*-

from turtle import turtlesize
import rospy, roslaunch, os
from enum import Enum
from std_msgs.msg import UInt8
 
class CoreNodeController():
    def __init__(self):
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('core/nodes', '')

        # Subscriber
        self.sub_mission = rospy.Subscriber('/mission', UInt8, self.cbReceiveMode, queue_size=1)

        # Sub from each mission step data
        # rospy.Subscriber('/mission/intersection', UInt8, self.cbIntersectionStep, queue_size=1)
        rospy.Subscriber('/mission/tunnel', UInt8, self.cbTunnelStep, queue_size=1)
        

        self.Mission = Enum('Mission', 'Idle TrafficLight Intersection Construction Parking LevelCrossing Tunnel')
        

        # each mission step enum
        self.TunnelStep = Enum('TunnelStep', 'default process nav end')

        self.is_triggered = True
        # self.current_mode = self.Mission.TrafficLight.value
        self.current_mode = self.Mission.Construction.value
        # self.current_mode = self.Mission.Parking.value
        self.current_step_tunnel = self.TunnelStep.default.value

        # launcher enum
        self.Launcher = Enum('Launcher', 'detectlane controllane controlmoving trafficlight intersection construction parking level tunnel controltunnel')
        self.launch_trafficlight_launched = False
        self.launch_detectlane_launched = False
        self.launch_controllane_launched = False
        self.launch_intersection_launched = False
        self.launch_construction_launched = False
        self.launch_parking_launched = False
        self.launch_level_launched = False
        self.launch_controlmoving_launched = False
        self.launch_tunnel_launched = False
        self.launch_controltunnel_launched = False
        


        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        
        loop_rate = rospy.Rate(10) # 10hz

        while not rospy.is_shutdown():
            if self.is_triggered == True:
                self.fnControlNode()
            
            loop_rate.sleep()

    def cbReceiveMode(self, mode_msg): # only receive mode_msg
        rospy.loginfo("starts the progress with %d", mode_msg.data)
        
        self.current_mode = mode_msg.data
        self.is_triggered = True

    # create callback function
    # example
    def cbIntersectionStep(self, mode_msg):
        self.current_step_intersection = mode_msg.data
        self.is_triggered = True
    
    def cbConsturctionStep(self, mode_msg):
        self.current_step_construction = mode_msg.data
        self.is_triggered = True

    def cbParkingStep(self, mode_msg):
        self.current_step_parking = mode_msg.data
        self.is_triggered = True

    def cbLevelStep(self, mode_msg):
        self.current_step_level = mode_msg.data
        self.is_triggered = True

    def cbTunnelStep(self, mode_msg):
        self.current_step_tunnel = mode_msg.data
        self.is_triggered = True

    def fnControlNode(self):

        if self.current_mode == self.Mission.TrafficLight.value:
            rospy.loginfo('current mode: Traffic Light')
            self.fnLaunch(self.Launcher.trafficlight.value, True)

        elif self.current_mode == self.Mission.Intersection.value:
            rospy.loginfo('current mode: Intersection')
            self.fnLaunch(self.Launcher.trafficlight.value, False)
            self.fnLaunch(self.Launcher.intersection.value, True)
            self.fnLaunch(self.Launcher.detectlane.value, True)
            self.fnLaunch(self.Launcher.controllane.value, True)
            self.fnLaunch(self.Launcher.intersection.value, True)

            if self.current_step_intersection == self.IntersectionStep.default.value:
                rospy.loginfo('Intersection Default')
            
            elif self.current_step_intersection == self.IntersectionStep.process.value:
                rospy.loginfo('Intersection Process')
                self.fnLaunch(self.Launcher.detectlane.value, False)
                self.fnLaunch(self.Launcher.controllane.value, False)

            elif self.current_step_intersection == self.IntersectionStep.done.value:
                rospy.loginfo('Intersection Done')
                self.fnLaunch(self.Launcher.intersection.value, False)
                self.fnLaunch(self.Launcher.detectlane.value, True)
                self.fnLaunch(self.Launcher.controllane.value, True)


        elif self.current_mode == self.Mission.Construction.value:
            rospy.loginfo('current mode: Construction Mission')
            self.fnLaunch(self.Launcher.intersection.value, False)
            # self.fnLaunch(self.Launcher.detectlane.value, True)
            # self.fnLaunch(self.Launcher.controllane.value, True)
            self.fnLaunch(self.Launcher.construction.value, True)

        elif self.current_mode == self.Mission.Parking.value:
            rospy.loginfo('current mode: Parking Mission')
            self.fnLaunch(self.Launcher.construction.value, False)
            self.fnLaunch(self.Launcher.controllane.value, True)
            self.fnLaunch(self.Launcher.controlmoving.value, True)
            self.fnLaunch(self.Launcher.parking.value, True)
            
        elif self.current_mode == self.Mission.LevelCrossing.value:
            rospy.loginfo('current mode: LevelCrossing Mission')
            self.fnLaunch(self.Launcher.parking.value, False)
            self.fnLaunch(self.Launcher.controllane.value, True)
        
        elif self.current_mode == self.Mission.Tunnel.value:
            rospy.loginfo('current mode: Tunnel') # default process nav end

            if self.current_step_tunnel == self.TunnelStep.default.value:
                rospy.loginfo("tunnel default")
                self.fnLaunch(self.Launcher.tunnel.value, True)

            elif self.current_step_tunnel == self.TunnelStep.process.value:
                rospy.loginfo("tunnel process")
                self.fnLaunch(self.Launcher.detectlane.value, False)
                self.fnLaunch(self.Launcher.controllane.value, False)

            elif self.current_step_tunnel == self.TunnelStep.nav.value:
                rospy.loginfo("tunnel nav")
                self.fnLaunch(self.Launcher.controltunnel.value, True)

            elif self.current_step_tunnel == self.TunnelStep.end.value:
                rospy.loginfo("tunnel end")
                self.fnLaunch(self.Launcher.tunnel.value, False)
                self.fnLaunch(self.Launcher.controltunnel.value, False)

        self.is_triggered = False

    def fnLaunch(self, launch_num, is_start):

        # detect_traffic_light.launch
        if launch_num == self.Launcher.trafficlight.value:
            if is_start == True:
                if self.launch_trafficlight_launched == False:
                    self.launch_trafficlight = roslaunch.scriptapi.ROSLaunch()
                    self.launch_trafficlight = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/detect_traffic_light.launch"])
                    self.launch_trafficlight_launched = True
                    self.launch_trafficlight.start()
                else:
                    pass
            else:
                if self.launch_trafficlight_launched == True:
                    self.launch_trafficlight_launched = False
                    self.launch_trafficlight.shutdown()
                else:
                    pass

        # detect_lane.launch
        if launch_num == self.Launcher.detectlane.value:
            if is_start == True:
                if self.launch_detectlane_launched == False:
                    self.launch_detectlane = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detectlane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/detect_lane.launch"])
                    self.launch_detectlane_launched = True
                    self.launch_detectlane.start()
                else:
                    pass
            else:
                if self.launch_detectlane_launched == True:
                    self.launch_detectlane_launched = False
                    self.launch_detectlane.shutdown()
                else:
                    pass

        # control_lane.launch
        if launch_num == self.Launcher.controllane.value:
            if is_start == True:
                if self.launch_controllane_launched == False:
                    self.launch_controllane = roslaunch.scriptapi.ROSLaunch()
                    self.launch_controllane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "control/launch/control_lane.launch"])
                    self.launch_controllane_launched = True
                    self.launch_controllane.start()
                else:
                    pass
            else:
                if self.launch_controllane_launched == True:
                    self.launch_controllane_launched = False
                    self.launch_controllane.shutdown()
                else:
                    pass
            
        # detect_intersection.launch
        if launch_num == self.Launcher.intersection.value:
            if is_start == True:
                if self.launch_intersection_launched == False:
                    self.launch_intersection = roslaunch.scriptapi.ROSLaunch()
                    self.launch_intersection = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/detect_intersection.launch"])
                    self.launch_intersection_launched = True
                    self.launch_intersection.start()
                else:
                    pass
            else:
                if self.launch_intersection_launched == True:
                    self.launch_intersection_launched = False
                    self.launch_intersection.shutdown()
                else:
                    pass
            
        # control_moving.launch
        if launch_num == self.Launcher.controlmoving.value:
            if is_start == True:
                if self.launch_controlmoving_launched == False:
                    self.launch_controlmoving = roslaunch.scriptapi.ROSLaunch()
                    self.launch_controlmoving = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "control/launch/control_moving.launch"])
                    self.launch_controlmoving_launched = True
                    self.launch_controlmoving.start()
                else:
                    pass
            else:
                if self.launch_controlmoving_launched == True:
                    self.launch_controlmoving_launched = False
                    self.launch_controlmoving.shutdown()
                else:
                    pass

        # detect_construction
        if launch_num == self.Launcher.construction.value:
            if is_start == True:
                if self.launch_construction_launched == False:
                    self.launch_construction = roslaunch.scriptapi.ROSLaunch()
                    self.launch_construction = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/detect_construction.launch"])
                    self.launch_construction_launched = True
                    self.launch_construction.start()
                else:
                    pass
            else:
                if self.launch_construction_launched == True:
                    self.launch_construction_launched = False
                    self.launch_construction.shutdown()
                else:
                    pass

        # detect_parking
        if launch_num == self.Launcher.parking.value:
            if is_start == True:
                if self.launch_parking_launched == False:
                    self.launch_parking = roslaunch.scriptapi.ROSLaunch()
                    self.launch_parking = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/detect_parking.launch"])
                    self.launch_parking_launched = True
                    self.launch_parking.start()
                else:
                    pass
            else:
                if self.launch_parking_launched == True:
                    self.launch_parking_launched = False
                    self.launch_parking.shutdown()
                else:
                    pass

        # detect_tunnel.launch
        if launch_num == self.Launcher.tunnel.value:
            if is_start == True:
                if self.launch_tunnel_launched == False:
                    self.launch_tunnel = roslaunch.scriptapi.ROSLaunch()
                    self.launch_tunnel = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "detect/launch/detect_tunnel.launch"])
                    self.launch_tunnel_launched = True
                    self.launch_tunnel.start()
                else:
                    pass
            else:
                if self.launch_tunnel_launched == True:
                    self.launch_tunnel_launched = False
                    self.launch_tunnel.shutdown()
                else:
                    pass
        
        # control_tunnel.launch  
        if launch_num == self.Launcher.controltunnel.value:
            if is_start == True:
                if self.launch_controltunnel_launched == False:
                    self.launch_controltunnel = roslaunch.scriptapi.ROSLaunch()
                    self.launch_controltunnel = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "control/launch/control_tunnel.launch"])
                    self.launch_controltunnel_launched = True
                    self.launch_controltunnel.start()
                else:
                    pass
            else:
                if self.launch_controltunnel_launched == True:
                    self.launch_controltunnel_launched = False
                    self.launch_controltunnel.shutdown()
                else:
                    pass

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_node_controller')
    node = CoreNodeController()
    node.main()
